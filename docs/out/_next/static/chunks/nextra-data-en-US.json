{"/react/hooks/useAccount":{"title":"useAccount","data":{"":"This is a hook used to get the data associated with an account or the current connection status for that account. It allows for the collection of essential account information.\nimport { useAccount } from '@casperdash/useWallet';","usage#Usage":"import { useAccount } from '@casperdash/useWallet';\n\nfunction App() {\nconst { publicKey } = useAccount();\n\nreturn (\n<div>\nPublic key: {publicKey}\n</div>\n)\n}","return-value#Return Value":"{\npublicKey: string,\nstatus: string\n}","configuration#Configuration":"","onconnect-optional#onConnect (optional)":"Function to invoke when account connects.\nimport { useAccount } from '@casperdash/useWallet';\n\nfunction App() {\nconst { publicKey } = useAccount({\nonConnect(status) {\nconsole.log(status);\n},\n})\n}","ondisconnect-optional#onDisconnect (optional)":"Function to invoke when account disconnects.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { connect } = useConnect({\nonDisconnect(status) {\nconsole.log(status);\n},\n})\n}"}},"/":{"title":"Features","data":{"":"useWallet is a collection of React Hooks containing everything you need to start working with Casper Network. useWallet makes it easy to \"Connect Casper Wallet,\" sign messages, interact with contracts, and much more.\n\n\n\nnpm i @casperdash/useWallet\n\n\n\npnpm add @casperdash/useWallet\n\n\n\nyarn add @casperdash/useWallet\n\n\n\nGet Started Â· Examples Â· GitHub RepositoryConnect a Casper Wallet likes ðŸ‘» speed.\nimport {\nCasperProvider,\ncreateClient,\nCasperDashConnector,\nCasperSignerConnector\n} from '@casperdash/useWallet';\n\nconst client = createClient({\nconnectors: [new CasperSignerConnector(), new CasperDashConnector()],\nautoConnect: true,\n});\n\nfunction App() {\nreturn (\n<CasperProvider client={client}>\n<WalletProfile />\n</CasperProvider>\n)\n}\n\nimport {\nuseAccount,\nuseDisconnect,\nuseConnect,\nCasperSignerConnector,\nCasperDashConnector\n} from '@casperdash/useWallet';\n\nfunction WalletProfile() {\nconst { publicKey } = useAccount();\nconst { disconnect } = useDisconnect();\n\nconst { connect: connectWithCasperSigner } = useConnect({\nconnector: new CasperSignerConnector(),\n});\n\nconst { connect: connectWithCasperDash } = useConnect({\nconnector: new CasperDashConnector(),\n});\n\nif (publicKey)\nreturn (\n<div>\nConnected to {publicKey}\n<button onClick={() => disconnect()}>Disconnect</button>\n</div>\n)\n\nreturn (\n<div>\n<button onClick={() => connectWithCasperSigner()}>Connect with Casper Signer</button>\n</br>\n<button onClick={() => connectWithCasperDash()}>Connect with CasperDash</<button>\n</div>\n)\n}\nIn the above snippet, we create a useDApp client and pass it to the CasperProvider React Context. The client is set up to use the Casper Wallet Default Provider and automatically connect to previously connected wallets.Next, we use the useConnect hook to connect injected supporting wallets (Casper Signer and CasperDash) to the app. Finally, we show the connected account's public key with useAccount and allow them to disconnect with useDisconnect.\nðŸ’¼ In-app support for CasperDash and CasperSigner Wallet\nðŸ‘Ÿ Optimized with caching and duplicated request elimination\nðŸŒ€ Automatic data updates during account switches and disconnections\nðŸ¦„ TypeScript compatibility included\n\n... and a lot more."}},"/react/getting-started":{"title":"Getting Started","data":{"":"","manual-setup#Manual setup":"","installation#Installation":"Install useWallet and its ethers peer dependency.\n\n\nnpm i @casperdash/useWallet\n\n\n\npnpm add @casperdash/useWallet\n\n\n\nyarn add @casperdash/useWallet","create-a-usewallet-client#Create a useWallet client":"Next, create a useWallet Client instance using createClient, and pass the connectors.\nimport {\nCasperDashConnector,\nCasperSignerConnector,\nCasperProvider,\ncreateClient\n} from '@casperdash/useWallet';\n\n\nconst client = createClient({\nconnectors: [new CasperSignerConnector(), new CasperDashConnector()],\nautoConnect: true,\n});","wrap-app-with-casperprovider#Wrap app with CasperProvider":"Then, wrap your app with the CasperProvider component, passing client to it.\nconst client = createClient({\nconnectors: [new CasperSignerConnector(), new CasperDashConnector()],\nautoConnect: true,\n});\n\nfunction App() {\nreturn (\n<CasperProvider client={client}>\n<YourRoutes />\n</CasperProvider>\n)\n}","here-we-go#Here we go":"Time to use hooks in any components inside the CasperProvider.\nimport {\nCasperSignerConnector,\nCasperDashConnector\n} from '@casperdash/useWallet';\nimport { useAccount, useDisconnect, useConnect } from '@casperdash/useWallet';\n\nfunction WalletProfile() {\nconst { publicKey } = useAccount();\nconst { disconnect } = useDisconnect();\n\nconst { connect: connectWithCasperSigner } = useConnect({\nconnector: new CasperSignerConnector(),\n});\n\nconst { connect: connectWithCasperDash } = useConnect({\nconnector: new CasperDashConnector(),\n});\n\nif (publicKey)\nreturn (\n<div>\nConnected to {publicKey}\n<button onClick={() => disconnect()}>Disconnect</button>\n</div>\n)\n\nreturn (\n<div>\n<button onClick={() => connectWithCasperSigner()}>Connect with Casper Signer</button>\n</br>\n<button onClick={() => connectWithCasperDash()}>Connect with CasperDash</<button>\n</div>\n)\n}"}},"/react/hooks/useConnect":{"title":"useConnect","data":{"":"Easy-to-use hook for quickly connecting to an account with compatible connectors. It provides a convenient way to quickly and securely sync accounts with a variety of services and applications.\nimport { useConnect } from '@casperdash/useWallet';","usage#Usage":"import { CasperDashConnector } from '@casperdash/useWallet';\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction WalletProfile() {\nconst { connect: connectWithCasperDash } = useConnect({\nconnector: new CasperDashConnector(),\n});\n\nreturn (\n<div>\n<button onClick={() => connectWithCasperDash()}>Connect with CasperDash</<button>\n</div>\n)\n}","return-value#Return Value":"{\nconnect: function\n}","configuration#Configuration":"","connector-required#connector (Required)":"Connector to use for connecting wallet\nfunction App() {\nconst { connect } = useConnect({\nconnector: new CasperDashConnector(),\n})\n}","onerror-optional#onError (optional)":"Function to call when connecting error occurs.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { connect } = useConnect({\nonError(error) {\nconsole.log('Connect', error);\n},\n});\n}","onmutate-optional#onMutate (optional)":"This allows the useConnect Hook to pre-process the parameters given to the connect function before the account is connected, in the event those parameters would result in a connection failure. The return value of this function is used by both the onError and onSettled function.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { connect } = useConnect({\nonMutate(connector) {\nconsole.log('Connect');\n},\n});\n}","onsuccess-optional#onSuccess (optional)":"Function that is invoked when the connection to the account is successful.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { connect } = useConnect({\nonSuccess() {\nconsole.log('Connect');\n},\n});\n}","onsettled-optional#onSettled (optional)":"Function to invoke when the connection attempt has completed, providing information about success or failure of the connection.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { connect } = useConnect({\nonSettled(data, error) {\nconsole.log('Settled', { data, error });\n},\n});\n}"}},"/react/hooks/useDisconnect":{"title":"useDisconnect","data":{"":"Easy-to-use hook for quickly connecting to an account with compatible connectors. It provides a convenient way to quickly and securely sync accounts with a variety of services and applications.\nimport { useDisconnect } from '@casperdash/useWallet';","usage#Usage":"import { useDisconnect } from '@casperdash/useWallet';\n\nfunction WalletProfile() {\nconst { disconnect } = useDisconnect();\n\nreturn (\n<div>\n<button onClick={() => disconnect()}>Disconnect account</<button>\n</div>\n)\n}","return-value#Return Value":"{\nconndisconnectect: function\n}","configuration#Configuration":"","onerror-optional#onError (optional)":"Function to call when a disconnection error occurs.\nimport { useDisconnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { disconnect } = useDisconnect({\nonError(error) {\nconsole.log('Disconnect', error);\n},\n});\n}","onmutate-optional#onMutate (optional)":"Function fires before disconnect function. The return value of this function is used by both the onError and onSettled function.\nimport { useDisconnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { disconnect } = useDisconnect({\nonMutate() {\nconsole.log('Disconnect');\n},\n});\n}","onsuccess-optional#onSuccess (optional)":"Function to call when the disconnect has completed successfully.\nimport { useDisconnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { disconnect } = useDisconnect({\nonSuccess() {\nconsole.log('Disconnect');\n},\n});\n}","onsettled-optional#onSettled (optional)":"Function to execute when disconnect completes (successfully disconnected or error is thrown).\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { connect } = useConnect({\nonSettled(data, error) {\nconsole.log('Settled', { data, error });\n},\n});\n}"}},"/react/hooks/useSign":{"title":"useSign","data":{"":"Hook for signing transaction prior to submitting to the Casper network.\nimport { useSign } from '@casperdash/useWallet';","usage#Usage":"import { useSign } from '@casperdash/useWallet';\n\nfunction App() {\nconst { sign, data } = useSign({\ndeploy: {},\nsigningPublicKeyHex: 'abc',\ntargetPublicKeyHex: 'abcde',\n});\n\nreturn (\n<div>\n<button onClick={() => sign()}>Sign with CasperDash</<button>\n</div>\n)\n}","return-value#Return Value":"{\nsign: function,\nstatus: string,\nisSuccess: boolean\n}","configuration#Configuration":"","onerror-optional#onError (optional)":"Function to call when signing error occurs.\nimport { useSign } from '@casperdash/useWallet';\n\nfunction App() {\nconst { sign } = useSign({\nonError(error) {\nconsole.log('Sign', error);\n},\n});\n}","onmutate-optional#onMutate (optional)":"Function is called before any attempt to sign, receiving all relevant data, allowing for manipulation of this data before the operation itself is committed. Return value of this function will be passed to both onError and onSettled in event of a failure.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { sign, data } = useSign({\ndeploy: {},\nsigningPublicKeyHex: 'abc',\ntargetPublicKeyHex: 'abcde,\nonMutate() {\nconsole.log('Sign');\n},\n});\n}","onsuccess-optional#onSuccess (optional)":"Function that is invoked when the sign successful.\nimport { useSign } from '@casperdash/useWallet';\n\nfunction App() {\nconst { sign, data } = useSign({\ndeploy: {},\nsigningPublicKeyHex: 'abc',\ntargetPublicKeyHex: 'abcde,\nonSuccess() {\nconsole.log('Sign sucessfully');\n},\n});\n}","onsettled-optional#onSettled (optional)":"Function to invoke when sign has completed, providing information about success or failure of the connection.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { sign, data } = useSign({\ndeploy: {},\nsigningPublicKeyHex: 'abc',\ntargetPublicKeyHex: 'abcde,\nonSettled(data, error) {\nconsole.log('Settled', { data, error });\n},\n});\n}"}},"/react/hooks/useSignMessage":{"title":"useSignMessage","data":{"":"Hook for signing transaction prior to submitting to the Casper network.\nimport { useSignMessage } from '@casperdash/useWallet';","usage#Usage":"import { useSignMessage } from '@casperdash/useWallet';\n\nfunction WalletProfile() {\nconst { signMessage, data } = useSignMessage({\nmessage: 'Hello CasperDash',\nsigningPublicKeyHex: 'public-key',\n});\n\nreturn (\n<div>\n<button onClick={() => signMessage()}>Sign message with CasperDash</<button>\n</div>\n)\n}","return-value#Return Value":"{\nsign: function,\nstatus: string,\nisSuccess: boolean\n}","configuration#Configuration":"","onerror-optional#onError (optional)":"Function to call when signing message error occurs.\nimport { useSignMessage } from '@casperdash/useWallet';\n\nfunction App() {\nconst { signMessage } = useSignMessage({\nonError(error) {\nconsole.log('SignMessage', error);\n},\n});\n}","onmutate-optional#onMutate (optional)":"Function is called before any attempt to sign message, receiving all relevant data, allowing for manipulation of this data before the operation itself is committed. Return value of this function will be passed to both onError and onSettled in event of a failure.\nimport { useSignMessage } from '@casperdash/useWallet';\n\nfunction App() {\nconst { signMessage } = useSignMessage({\nmessage: 'Hello CasperDash',\nsigningPublicKeyHex: 'public-key',\nonMutate() {\nconsole.log('Sign message');\n},\n});\n}","onsuccess-optional#onSuccess (optional)":"Function that is invoked when the sign message successful.\nimport { useSignMessage } from '@casperdash/useWallet';\n\nfunction App() {\nconst { signMessage } = useSignMessage({\nmessage: 'Hello CasperDash',\nsigningPublicKeyHex: 'public-key',\nonSuccess() {\nconsole.log('Sign sucessfully');\n},\n});\n}","onsettled-optional#onSettled (optional)":"Function to invoke when sign message has completed, providing information about success or failure of the connection.\nimport { useConnect } from '@casperdash/useWallet';\n\nfunction App() {\nconst { signMessage } = useSignMessage({\nmessage: 'Hello CasperDash',\nsigningPublicKeyHex: 'public-key',\nonSettled(data, error) {\nconsole.log('Settled', { data, error });\n},\n});\n}"}}}