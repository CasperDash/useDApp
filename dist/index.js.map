{"version":3,"sources":["../src/hooks/useAccount.ts","../src/hooks/useConnect.ts","../src/hooks/useDisconnect.ts","../src/hooks/useSign.ts","../src/hooks/useSignMessage.ts","../src/provider.ts","../src/client.ts","../src/enums/queryKeys.ts","../src/enums/mutationKeys.ts"],"sourcesContent":["import {\n  Account,\n  watchAccount,\n  StatusEnum,\n  getActivePublicKey,\n} from '@usedapp/core';\nimport { useEffect, useState } from 'react';\n\nexport const useAccount = () => {\n  const [publicKey, setPublicKey] = useState<string | null>(null);\n  const [status, setStatus] = useState<StatusEnum>(StatusEnum.DISCONNECTED);\n\n  useEffect(() => {\n    const initAccount = async (): Promise<void> => {\n      const fetchedPublicKey = await getActivePublicKey();\n\n      if (fetchedPublicKey) {\n        setPublicKey(fetchedPublicKey);\n      }\n    };\n\n    void initAccount();\n\n    watchAccount((account: Account | null) => {\n      if (!account) {\n        return;\n      }\n\n      setPublicKey(account.publicKey ? account.publicKey : null);\n      setStatus(account.status ? account.status : StatusEnum.DISCONNECTED);\n    });\n  }, []);\n\n  return {\n    status,\n    publicKey,\n  };\n};\n","import { useCallback } from 'react';\nimport { useMutation, UseMutationOptions } from '@tanstack/react-query';\nimport { connect as connectDapp, ConnectParams, ConnectResult } from '@usedapp/core';\nimport { MutationKeysEnum } from '@usedapp/react';\n\nexport type UseConnectParams = Partial<ConnectParams>;\n\nexport type UseConnectConfig = Partial<UseMutationOptions<ConnectResult, unknown, UseConnectParams>>;\n\nexport type UseConnectProps = UseConnectParams & UseConnectConfig;\n\nconst mutationFn = async (args: UseConnectParams) => {\n  const { connector } = args;\n  if (!connector) {\n    throw new Error('connector is required');\n  }\n\n  return connectDapp({ connector });\n};\n\nexport const useConnect = ({\n  connector,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess,\n}: UseConnectProps) => {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    mutate,\n    mutateAsync,\n  } = useMutation([MutationKeysEnum.CONNECT], mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess,\n  });\n\n  const connect = useCallback(() => {\n    return mutate({\n      connector,\n    });\n  }, [connector]);\n\n  const connectAsync = useCallback(async () => {\n    return mutateAsync({\n      connector,\n    });\n  }, [connector]);\n\n  return {\n    connect,\n    connectAsync,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n  };\n};\n","\nimport { useCallback } from 'react';\nimport { useMutation, UseMutationOptions } from '@tanstack/react-query';\nimport { disconnect as disconnectDapp } from '@usedapp/core';\nimport { MutationKeysEnum } from '@usedapp/react';\n\nexport type UseDisconnectConfig = Partial<UseMutationOptions>;\n\nexport type UseDisconnectProps = UseDisconnectConfig;\n\nconst mutationFn = async () => {\n  return disconnectDapp();\n};\n\nexport const useDisconnect = ({\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess,\n}: UseDisconnectProps = {}) => {\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    status,\n    reset,\n    mutate,\n    mutateAsync,\n  } = useMutation([MutationKeysEnum.DISCONNECT], mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess,\n  });\n\n  const disconnect = useCallback(() => {\n    return mutate();\n  }, []);\n\n  const disconnectAsync = useCallback(async () => {\n    return mutateAsync();\n  }, []);\n\n  return {\n    disconnect,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    status,\n    reset,\n  };\n};\n","import { useCallback } from 'react';\nimport { useMutation, UseMutationOptions } from '@tanstack/react-query';\nimport { sign as signDapp, SignParams, SignResult } from '@usedapp/core';\nimport { MutationKeysEnum } from '@usedapp/react';\n\nexport type UseSignParams = Partial<SignParams>;\n\nexport type UseSignConfig = Partial<\nUseMutationOptions<SignResult, unknown, UseSignParams>\n>;\n\nexport type UseSignProps = Partial<UseSignParams & UseSignConfig>;\n\nconst mutationFn = async ({ deploy, signingPublicKey, targetPublicKeyHex }: UseSignParams) => {\n  if (!deploy) {\n    throw new Error('Deploy must be a non-empty');\n  }\n  if (!signingPublicKey) {\n    throw new Error('signingPublicKey must be a non-empty string');\n  }\n  if (!targetPublicKeyHex) {\n    throw new Error('targetPublicKeyHex must be a non-empty string');\n  }\n\n  return signDapp({ deploy, signingPublicKey, targetPublicKeyHex });\n};\n\nexport const useSign = ({\n  deploy,\n  signingPublicKey,\n  targetPublicKeyHex,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess,\n}: UseSignProps = {}) => {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    mutate,\n    mutateAsync,\n  } = useMutation([MutationKeysEnum.SIGN], mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess,\n  });\n\n  const sign = useCallback((params: UseSignParams) => {\n    return mutate(params || {\n      deploy,\n      signingPublicKey,\n      targetPublicKeyHex,\n    });\n  }, [deploy, signingPublicKey, targetPublicKeyHex, mutate]);\n\n  const signAsync = useCallback(async (params: UseSignParams) => {\n    return mutateAsync(params || {\n      deploy,\n      signingPublicKey,\n      targetPublicKeyHex,\n    });\n  }, [deploy, signingPublicKey, targetPublicKeyHex, mutateAsync]);\n\n  return {\n    sign,\n    signAsync,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n  };\n};\n","import { useCallback } from 'react';\nimport { useMutation, UseMutationOptions } from '@tanstack/react-query';\nimport {\n  signMessage as signMessageDapp,\n  SignMessageParams,\n  SignMessageResult,\n} from '@usedapp/core';\nimport { MutationKeysEnum } from '@usedapp/react';\n\nexport type UseSignMessageParams = Partial<SignMessageParams>;\n\nexport type UseSignMessageConfig = Partial<\nUseMutationOptions<SignMessageResult, unknown, UseSignMessageParams>\n>;\n\nexport type UseSignMessageProps = Partial<UseSignMessageParams & UseSignMessageConfig>;\n\nconst mutationFn = async ({ message, signingPublicKey }: UseSignMessageParams) => {\n  if (!message) {\n    throw new Error('Message must be a non-empty string');\n  }\n  if (!signingPublicKey) {\n    throw new Error('signingPublicKey must be a non-empty string');\n  }\n\n  return signMessageDapp({ message, signingPublicKey });\n};\n\nexport const useSignMessage = ({\n  message,\n  signingPublicKey,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess,\n}: UseSignMessageProps = {}) => {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    mutate,\n    mutateAsync,\n  } = useMutation([MutationKeysEnum.SIGN_MESSAGE, signingPublicKey, message], mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess,\n  });\n\n  const signMessage = useCallback((params: UseSignMessageParams) => {\n    return mutate(params || {\n      message,\n      signingPublicKey,\n    });\n  }, [message, signingPublicKey, mutate]);\n\n  const signMessageAsync = useCallback(async (params: UseSignMessageParams) => {\n    return mutateAsync(params || {\n      message,\n      signingPublicKey,\n    });\n  }, [message, signingPublicKey, mutateAsync]);\n\n  return {\n    signMessage,\n    signMessageAsync,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n  };\n};\n","import * as React from 'react';\nimport type { QueryClient } from '@tanstack/react-query';\nimport { QueryClientProvider } from '@tanstack/react-query';\n\nimport type { Client } from './client';\n\ntype Props = {\n  children: React.ReactElement;\n  client: Client;\n};\n\nexport const Context = React.createContext<Client | undefined>(undefined);\n\nexport const queryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n);\n\nexport const CasperProvider = ({ children, client }: Props): JSX.Element => {\n  return React.createElement(\n    Context.Provider,\n    {\n      children: React.createElement(\n        QueryClientProvider,\n        {\n          children,\n          client: client.queryClient,\n          // context: queryClientContext,\n        },\n      ),\n      value: client,\n    },\n  );\n};\n\nexport const useClient = () => {\n  const client = React.useContext(Context);\n  if (!client)\n    throw new Error(\n      [\n        '`useClient` must be used within `CasperProvider`.\\n',\n      ].join('\\n'),\n    );\n  return client;\n};\n","import { QueryClient } from '@tanstack/react-query';\nimport {\n  ClientConfig as CasperClientConfig,\n  createClient as createCasperClient,\n  Client as CasperClient,\n} from '@usedapp/core';\n\nexport type CreateClientConfig = CasperClientConfig & {\n  queryClient?: QueryClient;\n};\n\nexport const createClient = ({\n  queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        cacheTime: 1000 * 60 * 60 * 24,\n        networkMode: 'offlineFirst',\n        refetchOnWindowFocus: false,\n        retry: 0,\n      },\n      mutations: {\n        networkMode: 'offlineFirst',\n      },\n    },\n  }),\n  ...config\n}: CreateClientConfig): Client => {\n  const casperClient = createCasperClient(config);\n\n  return Object.assign(casperClient, {\n    queryClient,\n  });\n};\n\nexport type Client = CasperClient & { queryClient: QueryClient };\n","export enum QueryKeysEnum {\n  CONNECT = 'connect',\n}\n","export enum MutationKeysEnum {\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  SIGN = 'sign',\n  SIGN_MESSAGE = 'sign_message',\n}\n"],"mappings":"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","names":["useCallback","useMutation","mutationFn","useMutation","useCallback","useCallback","useMutation","mutationFn","useMutation","useCallback","useCallback","useMutation","mutationFn","useMutation","useCallback","QueryKeysEnum","MutationKeysEnum"]}